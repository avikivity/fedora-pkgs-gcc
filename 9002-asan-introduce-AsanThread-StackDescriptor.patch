From fd0ddbd84c4d21b1712316c37c13212db86c528b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pawe=C5=82=20Dziepak?= <pdziepak@scylladb.com>
Date: Wed, 27 Jan 2016 09:45:40 +0000
Subject: [PATCH 9002/9003] asan: introduce AsanThread::StackDescriptor

StackDescriptors contains all stack information (bottom, top and size),
which will make code implementing better support for swapcontext()
simpler.
---
 libsanitizer/asan/asan_thread.cc | 15 ++++++++-------
 libsanitizer/asan/asan_thread.h  | 28 ++++++++++++++++++++--------
 2 files changed, 28 insertions(+), 15 deletions(-)

diff --git a/libsanitizer/asan/asan_thread.cc b/libsanitizer/asan/asan_thread.cc
index 92f968b..fc8b3e5 100644
--- a/libsanitizer/asan/asan_thread.cc
+++ b/libsanitizer/asan/asan_thread.cc
@@ -150,16 +150,16 @@ FakeStack *AsanThread::AsyncSignalSafeLazyInitFakeStack() {
 void AsanThread::Init() {
   fake_stack_ = nullptr;  // Will be initialized lazily if needed.
   CHECK_EQ(this->stack_size(), 0U);
   SetThreadStackAndTls();
   CHECK_GT(this->stack_size(), 0U);
-  CHECK(AddrIsInMem(stack_bottom_));
-  CHECK(AddrIsInMem(stack_top_ - 1));
+  CHECK(AddrIsInMem(stack_bottom()));
+  CHECK(AddrIsInMem(stack_top() - 1));
   ClearShadowForThreadStackAndTLS();
   int local = 0;
   VReport(1, "T%d: stack [%p,%p) size 0x%zx; local=%p\n", tid(),
-          (void *)stack_bottom_, (void *)stack_top_, stack_top_ - stack_bottom_,
+          (void *)stack_bottom(), (void *)stack_top(), stack_top() - stack_bottom(),
           &local);
 }
 
 thread_return_t AsanThread::ThreadStart(
     uptr os_id, atomic_uintptr_t *signal_thread_is_registered) {
@@ -191,21 +191,22 @@ thread_return_t AsanThread::ThreadStart(
   return res;
 }
 
 void AsanThread::SetThreadStackAndTls() {
   uptr tls_size = 0;
-  GetThreadStackAndTls(tid() == 0, &stack_bottom_, &stack_size_, &tls_begin_,
-                       &tls_size);
-  stack_top_ = stack_bottom_ + stack_size_;
+  GetThreadStackAndTls(tid() == 0, &current_stack_.stack_bottom,
+                       &current_stack_.stack_size, &tls_begin_, &tls_size);
+  current_stack_.stack_top = current_stack_.stack_bottom
+                             + current_stack_.stack_size;
   tls_end_ = tls_begin_ + tls_size;
 
   int local;
   CHECK(AddrIsInStack((uptr)&local));
 }
 
 void AsanThread::ClearShadowForThreadStackAndTLS() {
-  PoisonShadow(stack_bottom_, stack_top_ - stack_bottom_, 0);
+  PoisonShadow(stack_bottom(), stack_top() - stack_bottom(), 0);
   if (tls_begin_ != tls_end_)
     PoisonShadow(tls_begin_, tls_end_ - tls_begin_, 0);
 }
 
 bool AsanThread::GetStackFrameAccessByAddr(uptr addr,
diff --git a/libsanitizer/asan/asan_thread.h b/libsanitizer/asan/asan_thread.h
index 27a3367..335cf59 100644
--- a/libsanitizer/asan/asan_thread.h
+++ b/libsanitizer/asan/asan_thread.h
@@ -58,13 +58,20 @@ class AsanThread {
 
   void Init();  // Should be called from the thread itself.
   thread_return_t ThreadStart(uptr os_id,
                               atomic_uintptr_t *signal_thread_is_registered);
 
-  uptr stack_top() { return stack_top_; }
-  uptr stack_bottom() { return stack_bottom_; }
-  uptr stack_size() { return stack_size_; }
+  // stack_size == stack_top - stack_bottom;
+  struct StackDescriptor {
+    uptr stack_top;
+    uptr stack_bottom;
+    uptr stack_size;
+  };
+
+  uptr stack_top() { return CurrentStack()->stack_top; }
+  uptr stack_bottom() { return CurrentStack()->stack_bottom; }
+  uptr stack_size() { return CurrentStack()->stack_size; }
   uptr tls_begin() { return tls_begin_; }
   uptr tls_end() { return tls_end_; }
   u32 tid() { return context_->tid; }
   AsanThreadContext *context() { return context_; }
   void set_context(AsanThreadContext *context) { context_ = context; }
@@ -74,12 +81,20 @@ class AsanThread {
     uptr frame_pc;
     const char *frame_descr;
   };
   bool GetStackFrameAccessByAddr(uptr addr, StackFrameAccess *access);
 
+  bool AddrIsInStack(StackDescriptor *stack, uptr addr) {
+    return addr >= stack->stack_bottom && addr < stack->stack_top;
+  }
+
+  StackDescriptor *CurrentStack() {
+    return &current_stack_;
+  }
+
   bool AddrIsInStack(uptr addr) {
-    return addr >= stack_bottom_ && addr < stack_top_;
+    return AddrIsInStack(CurrentStack(), addr);
   }
 
   void DeleteFakeStack(int tid) {
     if (!fake_stack_) return;
     FakeStack *t = fake_stack_;
@@ -121,15 +136,12 @@ class AsanThread {
   FakeStack *AsyncSignalSafeLazyInitFakeStack();
 
   AsanThreadContext *context_;
   thread_callback_t start_routine_;
   void *arg_;
-  uptr stack_top_;
-  uptr stack_bottom_;
-  // stack_size_ == stack_top_ - stack_bottom_;
   // It needs to be set in a async-signal-safe manner.
-  uptr stack_size_;
+  StackDescriptor current_stack_;
   uptr tls_begin_;
   uptr tls_end_;
 
   FakeStack *fake_stack_;
   AsanThreadLocalMallocStorage malloc_storage_;
-- 
2.7.4

